using System;
using System.Collections.Generic;
using System.Linq;
using System.Drawing;
using System.IO;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;
using Microsoft.Xna.Framework.Storage;

namespace Asteroids_Clone
{
    /// <summary>
    /// This is the main type for your game.
    /// </summary>
    public class Game1 : Game
    {
        // Spritebatch & Graphics initialization
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;

        //Game Variables
        int ScreenWidth, ScreenHeight;
        int level = 0;
        int score = 0;
        int lives;
        float cooldown = 180f;
        float tick = 0f;
        string HiScore;
        bool GameOver = true;
        bool startup = true;
        bool Toggle;
        float distance = 0.0f;

        //Keyboard & Mouse Declarations
        KeyboardState oldState;
        KeyboardState newState;
        MouseState oldMouse;
        MouseState newMouse;

        //Ship Entity
        Sprite ship;

        //Bullet Entities & List
        Sprite bullet;
        List<Sprite> bullets = new List<Sprite>();

        //Asteroid Entities & List
        List<Texture2D> asteroidTextures = new List<Texture2D>();
        List<Sprite> asteroids = new List<Sprite>();

        //Textures
        SpriteFont NewSpriteFont;
        Texture2D shipTex;
        Texture2D shipthrust;
        Texture2D banner;
        Texture2D GUI;
        Texture2D controls;
        Texture2D instructions;

        //Sounds
        SoundEffect tonelow;
        SoundEffect tonehigh;
        SoundEffect shoot;
        SoundEffect thrust;

        // Intitializing the Random plugin/ library for use in the program
        Random random = new Random();

        public Game1()
        {
            graphics = new GraphicsDeviceManager(this); //This line is created by the IDE
            Content.RootDirectory = "Content";          //This line is created by the IDE
            graphics.PreferredBackBufferHeight = 600;   //Sets the gamescreen height to 600 Pixels
            graphics.PreferredBackBufferWidth = 600;    //Sets the gamescreen width to 600 Pixels
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            base.Initialize();
            SetupGame();            // Calls the first of my subroutines
        }

        private void SetupGame()    //This is the subroutine called first
        {
            ScreenHeight = graphics.GraphicsDevice.Viewport.Height; //Stores the value of the screen height into a variable
            ScreenWidth = graphics.GraphicsDevice.Viewport.Width;   //Stores the value of the screen width into a variable
            this.IsMouseVisible = false;     //This disables the mouse to be used and seen inside the game window whilst playing
            SetupShip();          //This calls the next subroutine in the chain
        }

        private void SetupShip() // This subroutine sets all of the ships values to default and creates the ship in the centre of the screen
        {
            ship.Rotation = 0;
            ship.Velocity = Vector2.Zero;
            bullets.Clear(); //Bullets are cleared here incase any remain after the previous game (if applicable)
            ship.Position = new Vector2(ScreenWidth / 2, ScreenHeight / 2);
            ship.Create();
        }
        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        { 
            spriteBatch = new SpriteBatch(GraphicsDevice); //This line is generated by the IDE

            //Loading Basic Textures
            ship = new Sprite(Content.Load<Texture2D>("Sprites/ship"));
            shipTex = Content.Load<Texture2D>("Sprites/ship");
            shipthrust = Content.Load<Texture2D>("Sprites/thrust");
            bullet = new Sprite(Content.Load<Texture2D>("Sprites/bullet"));

            for (int i = 1; i < 4; i++) //Loops from numbers 1 to 3
                asteroidTextures.Add(Content.Load<Texture2D>("Sprites/large" + i.ToString())); //Loads textures large1, large2 & large3

            for (int i = 1; i < 4; i++) //Loops from numbers 1 to 3
                asteroidTextures.Add(Content.Load<Texture2D>("Sprites/medium" + i.ToString())); //Loads textures medium1, medium2 & medium3

            for (int i = 1; i < 4; i++) //Loops from numbers 1 to 3
                asteroidTextures.Add(Content.Load<Texture2D>("Sprites/small" + i.ToString())); //Loads textures small1, small2 & small3

            NewSpriteFont = Content.Load<SpriteFont>("NewSpriteFont"); //Loads the font I will use for the program

            //Loads the textures I will use for the GUI/Menu
            banner = Content.Load<Texture2D>("Sprites/BANNER");
            GUI = Content.Load<Texture2D>("Sprites/WhiteSquare");
            controls = Content.Load<Texture2D>("Sprites/Keyboard");
            instructions = Content.Load<Texture2D>("Sprites/Instruction");

            //Loads all the Sounds that I will use
            tonehigh = Content.Load<SoundEffect>("Sounds/tonehi");
            tonelow = Content.Load<SoundEffect>("Sounds/tonelo");
            shoot = Content.Load<SoundEffect>("Sounds/shoot");
            thrust = Content.Load<SoundEffect>("Sounds/thrust");
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// game-specific content.
        /// </summary>
        protected override void UnloadContent()
        {
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            if (Keyboard.GetState().IsKeyDown(Keys.Escape)) // Exits the game if the escape key is pressed
                Exit();

            //Updates the mouse & keyboard states every frame
            newState = Keyboard.GetState();
            newMouse = Mouse.GetState();
            if (cooldown > 0)
            {
                cooldown -= 0.1f; // Decreases the cooldown variable by a constant amount if the cooldown is greater than 0
            }
            else if (cooldown <= 0)
            {
                cooldown = 0; // Negates the effect of a negative cooldown by setting cooldown to 0 when the if statement above causes it to hit 0
            }

            if (GameOver) //If either the game has just started or the player has lost all lives
            {
                asteroids.Clear(); //Clear all asteroid entities
                ship.Kill();       //Destroy the ship
                cooldown = 0;

                //High Score Tracking
                if (!new FileInfo("HighScore.txt").Exists) {  File.WriteAllText(AppDomain.CurrentDomain.BaseDirectory + @"\HighScore.txt", "0"); } // Checks if the highscore.txt file exits, if none is found then one is created with the value 0
                if (new FileInfo("HighScore.txt").Length == 0) {  File.WriteAllText(AppDomain.CurrentDomain.BaseDirectory + @"\HighScore.txt", "0"); } // Checks if the highscore.txt file is empty, if so it sets the value inside to 0
                HiScore = File.ReadLines(AppDomain.CurrentDomain.BaseDirectory + @"\HighScore.txt").First(); // Stores the value of the first line in the highscore.txt file into variable HiScore
                int HighScore = Convert.ToInt32(HiScore); //Converts the HiScore into an int and stores it in the local variable HighScore
                if (score > HighScore) // If the score the player achieved is greater than the HighScore
                {
                    File.WriteAllText(AppDomain.CurrentDomain.BaseDirectory + @"\HighScore.txt", score.ToString()); //Writing the new highscore (variable score) to the highscore.txt file
                }

                if (newState.IsKeyDown(Keys.Enter)) // If the player presses the enter key on the keyboard
                {
                    //Game is initialized (default values set, gameover and startup set to false)
                    level = 0;
                    score = 0;
                    lives = 3;
                    SetupGame();       //Subroutine called to setup the game and other elements
                    CreateAsteroids(); //Subroutine called to setup the asteroids
                    GameOver = false;
                    startup = false;
                }
                else
                {
                    return;
                }
            }

            if (newState.IsKeyDown(Keys.Left))
            {
                ship.Rotation -= 0.05f; //If the left arrow key is pressed the ship rotates by this constant (- is left)
            }

            if (newState.IsKeyDown(Keys.Right))
            {
                ship.Rotation += 0.05f; //If the right arrow key is pressed the ship rotates by this constant (+ is right)
            }

            if (newState.IsKeyUp(Keys.Space) && oldState.IsKeyDown(Keys.Space))
            {
                FireBullet(); //If the spacebar is pressed the subroutine used to fire the bullet is called
            }

            if (newState.IsKeyUp(Keys.X) && oldState.IsKeyDown(Keys.X))
            {
                if (cooldown == 0 || cooldown <= 0) //Verifies that the cooldown is 0 before executing the code inside the if statement
                {
                    RadialPowerup(); //Calls the powerup function which shoots bullets in a circular pattern around the player
                    cooldown = 180f; //Sets the cooldown to 180f, which is equivalent to 30 seconds
                }
            }

            if (newState.IsKeyDown(Keys.Up))
            {
                AccelerateShip(); //If the up arrow is pressed the subroutine used to accelerate the ship is called
            }
            else if (newState.IsKeyUp(Keys.Up))
            {
                DecelerateShip(); //If the up arrow is released the subroutine used to decelerate the ship is called
            }

            if ((newState.IsKeyUp(Keys.LeftControl) && oldState.IsKeyDown(Keys.LeftControl)) ||
                (newState.IsKeyUp(Keys.RightControl) && oldState.IsKeyDown(Keys.RightControl)))
            {
                HyperSpace(); //If either the right control button or the left control button is pressed the hyperspace function is called
            }

            //Updates the Keyboard & Mouse States
            oldState = newState;
            oldMouse = newMouse;
            newMouse = Mouse.GetState();

            //Updates all elements of the game
            UpdateShip();
            UpdateAsteroids();
            UpdateBullets();
            UpdateAnimations(); //Subroutine that handles the ship animations (thrust flames)
            AllDead();          //Subroutine which checks if all the asteroids are dead & acts upon that information.

            base.Update(gameTime);
        }

        private float GetPercentageCooldown() //Function which returns the percentage cooldown left until it can be used again. (Decreases from 100)
        {
            float percentagecooldown = (cooldown / 180f) * 100;
            return percentagecooldown;
        }

        private void AllDead()
        {
            bool allDead = true;

            foreach (Sprite s in asteroids) //Loops through all of the entities stored in the asteroids list
            {
                if (s.Alive)
                    allDead = false; // If any of the entities are alive then allDead is false.
            }

            if (allDead) // If allDead is true
            {
                //If all asteroids are dead then the game is setup again
                SetupGame();
                level++; //Level incremented
                asteroids.Clear();
                CreateAsteroids();
            }

        }

        private void HyperSpace()
        {
            int positionX;
            int positionY;
            positionX = random.Next(ship.Width, ScreenWidth - ship.Width); //Sets the local variable positionX to contain a random number within parameters the ship could spawn in (Width)
            positionY = random.Next(ship.Height, ScreenHeight - ship.Height); //Sets the local variable positionY to contain a random number within parameters the ship could spawn in (Height)

            ship.Position = new Vector2(positionX, positionY); //Sets the ship's position to the 2 values set previously to the local variables positionX & positionY

            ship.Velocity = Vector2.Zero; //Sets the ship's velocity to 0
        }

        private void AccelerateShip()
        {
            ship.Velocity += new Vector2((float)(Math.Cos(ship.Rotation - (float)MathHelper.PiOver2) * 0.1f), 
                (float)((Math.Sin(ship.Rotation - (float)MathHelper.PiOver2) * 0.1f))); //Calculates the velocity & direction the ship is already travelling according to its rotation.

            if (ship.Velocity.X > 5.0f)
            {
                ship.Velocity = new Vector2(5.0f, ship.Velocity.Y); //If Max Positive X Velocity is reached then it stops increasing velocity (sets velocity to max)
            }
            if (ship.Velocity.X < -5.0f)
            {
                ship.Velocity = new Vector2(-5.0f, ship.Velocity.Y); //If Max Negative X Velocity is reached then it stops increasing velocity (sets velocity to max)
            }
            if (ship.Velocity.Y > 5.0f)
            {
                ship.Velocity = new Vector2(ship.Velocity.X, 5.0f); //If Max Positive Y Velocity is reached then it stops increasing velocity (sets velocity to max)
            }
            if (ship.Velocity.Y < -5.0f)
            {
                ship.Velocity = new Vector2(ship.Velocity.X, -5.0f); //If Max Negative Y Velocity is reached then it stops increasing velocity (sets velocity to max)
            }
        }

        private void DecelerateShip()
        {
            if (ship.Velocity.X < 0)
            {
                ship.Velocity = new Vector2(ship.Velocity.X + 0.02f, ship.Velocity.Y); //If Ship is travelling in the Negative X direction then add a constant to slow it down at a constant rate.
            }

            if (ship.Velocity.X > 0)
            {
                ship.Velocity = new Vector2(ship.Velocity.X - 0.02f, ship.Velocity.Y); //If Ship is travelling in the Positive X direction then subtract a constant to slow it down at a constant rate.
            }

            if (ship.Velocity.Y < 0)
            {
                ship.Velocity = new Vector2(ship.Velocity.X, ship.Velocity.Y + 0.02f); //If Ship is travelling in the Negative Y direction then add a constant to slow it down at a constant rate.
            }

            if (ship.Velocity.Y > 0)
            {
                ship.Velocity = new Vector2(ship.Velocity.X, ship.Velocity.Y - 0.02f); //If Ship is travelling in the Positive Y direction then add a constant to slow it down at a constant rate.
            }
        }

        public void UpdateShip()
        {
            ship.Position += ship.Velocity; //Sets the ship's position (every frame) according to its velocity

            if (ship.Position.X + ship.Width < 0)
            {
                ship.Position = new Vector2(ScreenWidth, ship.Position.Y); //If ship goes off the screen to the left
            }
            if (ship.Position.X - ship.Width > ScreenWidth)
            {
                ship.Position = new Vector2(0, ship.Position.Y); //If ship goes off the screen to the right
            }
            if (ship.Position.Y + ship.Height < 0)
            {
                ship.Position = new Vector2(ship.Position.X, ScreenHeight); //If ship goes off the screen to the north
            }
            if (ship.Position.Y - ship.Height > ScreenHeight)
            {
                ship.Position = new Vector2(ship.Position.X, 0); //If ship goes off the screen to the south
            }
        }

        private void CreateAsteroids()
        {
            int value;

            for (int i = 0; i < 4 + level; i++) //Generates 3 large asteroids on the first level, then 1 extra each level
            {
                int index = random.Next(0, 3); //Takes a random value for the local variable index, used to select which asteroid texture will be used.

                Sprite tempSprite = new Sprite(asteroidTextures[index]); //Creates a temporary sprite for editing, stores the value from the textures list according to the index value calculated.
                asteroids.Add(tempSprite);
                asteroids[i].Index = index;	//stores the index value of the tempsprite into the asteroids list

                double xPos = 0;
                double yPos = 0;

                value = random.Next(0, 8);

                switch (value) //switch statement used to accept a random value
                {
                    case 0: //asteroids spawned randomly on the borders of the screen in random x and y positions (without spawning on the player)
                    case 1:
                        xPos = asteroids[i].Width + random.NextDouble() * 40;
                        yPos = random.NextDouble() * ScreenHeight;
                        break;
                    case 2:
                    case 3:
                        xPos = ScreenWidth - random.NextDouble() * 40;
                        yPos = random.NextDouble() * ScreenHeight;
                        break;
                    case 4:
                    case 5:
                        xPos = random.NextDouble() * ScreenWidth;
                        yPos = asteroids[i].Height + random.NextDouble() * 40;
                        break;
                    default:
                        xPos = random.NextDouble() * ScreenWidth;
                        yPos = ScreenHeight - random.NextDouble() * 40;
                        break;
                }

                asteroids[i].Position = new Vector2((float)xPos, (float)yPos); //sets the asteroids position to the x & y positions generated in the switch statement

                asteroids[i].Velocity = RandomVelocity(); //Calls the RandomVelocity() function in order to generate a random velocity for the new asteroids

                asteroids[i].Rotation = (float)random.NextDouble() *
                        MathHelper.Pi * 4 - MathHelper.Pi * 2; //Generates a random rotation

                asteroids[i].Create(); //Creates the asteroid entity
            }
        }

        private void UpdateAsteroids()
        {
            
                foreach (Sprite a in asteroids) //loops through every entity in the asteroids list
            {
                    a.Position += a.Velocity; //Updates the position of the asteroids according to their velocities.

                if (a.Position.X + a.Width < 0) //If asteroid goes off the screen to the left
                {
                        a.Position = new Vector2(ScreenWidth, a.Position.Y);
                    }
                    if (a.Position.Y + a.Height < 0) //If asteroid goes off the screen to the north
                {
                        a.Position = new Vector2(a.Position.X, ScreenHeight);
                    }
                    if (a.Position.X - a.Width > ScreenWidth) //If asteroid goes off the screen to the right
                {
                        a.Position = new Vector2(0, a.Position.Y);
                    }
                    if (a.Position.Y - a.Height > ScreenHeight) //If asteroid goes off the screen to the south
                {
                        a.Position = new Vector2(a.Position.X, 0);
                    }

                if (a.Alive && CheckShipCollision(a)) //Checking the collisions between the player (ship) and the asteroids
                {
                    a.Kill();
                    lives--;
                    SetupShip();                    //LABEL HERE WHAT THIS CODE DOES
                    if (lives < 1)
                        GameOver = true;
                }
            }            
        }

        private bool CheckShipCollision(Sprite asteroid) //Function used to check the collision between the ship and the asteroids.
        {
            //Function uses pythagoras in order to calculate the distance between the two objects
            Vector2 position1 = asteroid.Position;
            Vector2 position2 = ship.Position;

            float Cathetus1 = Math.Abs(position1.X - position2.X); //Difference in X coordinates
            float Cathetus2 = Math.Abs(position1.Y - position2.Y); //Difference in Y coordinates

            Cathetus1 *= Cathetus1; //a^2
            Cathetus2 *= Cathetus2; //b^2

            distance = (float)Math.Sqrt(Cathetus1 + Cathetus2); //c = (a^2 + b^2)^0.5   where c is the distance between the objects

            if ((int)distance < ship.Width) //If distance between objects is less than ship width
                return true; //Collision detected (function returns true)

            return false;
        }

        private bool CheckAsteroidCollision(Sprite asteroid, Sprite bullet) //Function used to check the collision between the bullets and the asteroids.
        {
            //Function uses pythagoras in order to calculate the distance between the two objects
            Vector2 position1 = asteroid.Position;
            Vector2 position2 = bullet.Position;

            float Cathetus1 = Math.Abs(position1.X - position2.X); //Difference in X coordinates
            float Cathetus2 = Math.Abs(position1.Y - position2.Y); //Difference in Y coordinates

            Cathetus1 *= Cathetus1; //a^2
            Cathetus2 *= Cathetus2; //b^2

            distance = (float)Math.Sqrt(Cathetus1 + Cathetus2); //c = (a^2 + b^2)^0.5   where c is the distance between the objects

            if ((int)distance < asteroid.Width) //If distance between objects is less than ship width
                return true; //Collision detected (function returns true)

            return false;
        }

        private void UpdateAnimations() //Function used to handle Animations
        {
            tick += 0.01f; //Variable used as a counter or timer
            int animation = ((int)tick) % 4;
            if (animation == 1) // If tick MOD 4 == 1
                tonelow.Play();
            else if (animation == 8) //If tick MOD 4 == 8
                tonehigh.Play();

            if (Keyboard.GetState().IsKeyDown(Keys.Up))
            {
                ship.Texture = shipthrust; //Thrust ship texture displayed when the user is travelling forward
            }
            else
            {
                ship.Texture = shipTex; //Else normal ship texture is drawn
            }
            
        }

        private void UpdateBackground() //Function which changes the background up to level 5
        {
            switch(level) //Case select statement for level
            { 
                case 0: //Level 1
                    GraphicsDevice.Clear(Color.Black);
                    break;
                case 1: //Level 2
                    GraphicsDevice.Clear(Color.DarkBlue);
                    break;
                case 2: //Level 3
                    GraphicsDevice.Clear(Color.DarkRed);
                    break;
                case 3: //Level 4
                    GraphicsDevice.Clear(Color.DarkSlateGray);
                    break;
                case 4: //Level 5
                    GraphicsDevice.Clear(Color.OrangeRed);
                    break;
                default: //Default Background Colour (For Levels above 5)
                    GraphicsDevice.Clear(Color.Black);
                    break;
            }
        }

        private void UpdateBullets()
        {
            List<Sprite> destroyed = new List<Sprite>(); //Creates a local list of sprites which will be used to store destroyed asteroids (helps with splitting them)
            
            foreach (Sprite b in bullets) //Loops through every bullet entity
            {
                b.Position += b.Velocity; //Adds on the velocity to their position
                foreach (Sprite a in asteroids) //Loops through every asteroid entity
                {
                    if (a.Alive && CheckAsteroidCollision(a, b)) //If Asteroid is alive & If Asteroid and Bullet collide
                    {
                        if (a.Index < 3) //If Asteroid has a Large Texture
                            score += 25;
                        else if (a.Index < 6) //If Asteroid has a medium Texture
                            score += 50;
                        else
                            score += 100;
                        a.Kill(); //Kill Asteroid
                        destroyed.Add(a); //Add asteroid being accessed to the destroyed list
                        b.Kill(); //Kill Bullet
                    }
                }
                if (b.Position.X < 0)
                    b.Kill();
                else if (b.Position.Y < 0)
                    b.Kill();                                    //LABEL HERE ABOUT WHAT THIS CODE DOES
                else if (b.Position.X > ScreenWidth)
                    b.Kill();
                else if (b.Position.Y > ScreenHeight)
                    b.Kill();

            }

            for (int i = 0; i < bullets.Count; i++) //Loops for as many times as there are bullets
            {
                if (!bullets[i].Alive) //If bullets are not alive
                {
                    bullets.RemoveAt(i); //Remove them
                    i--;
                }
            }

            foreach (Sprite a in destroyed) //Loops through each entity/sprite in the destroyed list
            {
                SplitAsteroid(a); //Calls function SplitAsteroid() with the parameter of the asteroid in destroyed list being accessed
            }
        }

        private void SplitAsteroid(Sprite a)
        { 
            if (a.Index < 3) //If Asteroid is Large
            {
                for (int i = 0; i < 2; i++) //Loops twice
                {
                    int index = random.Next(3, 6); //Sets new index to the range which are medium sized asteroids
                    NewAsteroid(a, index); //Creates new asteroid at the point where the asteroid was killed by calling subroutine NewAsteroid()
                }
            }
            else if (a.Index < 6) //If Asteroid is Medium
            {
                for (int i = 0; i < 2; i++) //Loops twice
                {
                    int index = random.Next(6, 9); //Sets new index to the range which are small sized asteroids
                    NewAsteroid(a, index); //Creates new asteroid at the point where the asteroid was killed by calling subroutine NewAsteroid()
                }
            }
        }

        private void NewAsteroid(Sprite a, int index)
        {
            Sprite tempSprite = new Sprite(asteroidTextures[index]); //Creates a new local sprite to store the properties of the sprites from the asteroidTextures list

            tempSprite.Index = index; //Sets tempsprites index (aka Texture) to the paramater when the subroutine was called
            tempSprite.Position = a.Position; //Updates the position of the tempsprite according to the parameter when the subroutine was called
            tempSprite.Velocity = RandomVelocity(); //Calls RandomVelocity() In order to create a random velocity for the tempsprite

            tempSprite.Rotation = (float)random.NextDouble() *
                MathHelper.Pi * 4 - MathHelper.Pi * 2; //Generates random rotation

            tempSprite.Create(); //Creates the tempsprite in the game
            asteroids.Add(tempSprite); //Adds the tempsprite to the asteroids list
        }

        private Vector2 RandomVelocity()
        {
            float xVelocity = (float)(random.NextDouble() * 2 + .5); //Sets the X component of the velocity to a random value
            float yVelocity = (float)(random.NextDouble() * 2 + .5); //Sets the Y component of the velocity to a random value

            if (random.Next(2) == 1) //If new random number == 1
                xVelocity *= -1.0f; //Make X component of the new velocity negative

            if (random.Next(2) == 1) //If new random number == 1
                yVelocity *= -1.0f; //Make Y component of the new velocity negative

            return new Vector2(xVelocity, yVelocity); //Returns the calculated values for x & y components of velocity as a vector2.
        }

        private int GetScore() //Function which simply returns the score of the game at any time
        {
            return score;
        }

        private void RadialPowerup()
        {
            Vector2 velocity; //Creates Local Vector2 named velocity
            for (float i = 1; i < 9; i +=0.4f) // Repeats 20 Times
            {
                velocity = new Vector2((float)Math.Cos(ship.Rotation + i * (float)MathHelper.PiOver4), 
                    (float)Math.Sin(ship.Rotation + i * (float)MathHelper.PiOver4)); //Calculates velocity according to i
                BulletVel(velocity); //Calls a function to deal with the firing of the bullets (which are common to this subroutine and FireBullet() subroutine)
            }
        }
        
        private void FireBullet() //Method Called to fire the bullet (in straight line)
        {      
            Vector2 velocity = new Vector2((float)Math.Cos(ship.Rotation - (float)MathHelper.PiOver2),
                (float)Math.Sin(ship.Rotation - (float)MathHelper.PiOver2)); //Calculates velocity according to the ships rotation (taking into account the 2pi drawing error)
            shoot.Play(); //Play firing sound

            BulletVel(velocity); //Calls a function to deal with the firing of the bullets (which are common to this subroutine and RadialPowerup() subroutine)
        }

        private void BulletVel(Vector2 velocity) //Creates the bullet based on input velocity
        {
            Sprite newBullet = new Sprite(bullet.Texture); //Creates a new sprite with the texture of the bullets
            velocity.Normalize(); //Normalizes the velocity vector (turns it into a unit vector with same direction)
            velocity *= 6.0f; //Multiplies the velocity vector by 6 (Makes sure each bullet has the same velocity)

            newBullet.Velocity = velocity;

            newBullet.Position = ship.Position + newBullet.Velocity; //Sets new sprite's position to that in relation to its velocity and the ships position
            newBullet.Create(); //Creates the newbullet

            bullets.Add(newBullet); //Adds the newbullet to the bullet sprite list
        }

        private void CooldownBar() //This subroutine handles the Cooldown Bar
        {
            Rectangle CooldownRectangle = new Rectangle(450, 10, (int)GetPercentageCooldown(), 15); //Creates a rectangle in the topright according to the size of the percentage cooldown (width)
            spriteBatch.Draw(GUI, CooldownRectangle, Color.Blue); //Draws the CooldownRectangle to the screen in blue

            string guicooldown = string.Format("{0:0.0}", GetPercentageCooldown()); // Truncating the percentage results so it is only 1 decimal place & Setting to local variable guicooldown
            if (cooldown > 0)
                spriteBatch.DrawString(NewSpriteFont, guicooldown + "%", new Vector2(550, 10), Color.Yellow); //If cooldown is greater than 0 then the percentage cooldown is drawn next to the CooldownRectangle
            else if (cooldown == 0)
            {
                spriteBatch.DrawString(NewSpriteFont, "Powerup Ready", new Vector2(480, 10), Color.LimeGreen); //If cooldown is 0 then "Powerup Ready" Is drawn in place of the cooldown timer
            }

        }
        private void InstructionsScreen()//Small Subroutine used to make sure the instructions screen stays on the screen when it is pressed
        {
            Toggle = true;
        }
        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)  //Subroutine built into monogame and is called every frame and is used for drawing elements to the screen
        {
            GraphicsDevice.Clear(Color.Black);
            UpdateBackground();

            //Upon player losing all 3 lives
            if (GameOver)
            {
                Vector2 mousePos = new Vector2(Mouse.GetState().X, Mouse.GetState().Y); //Stores the position of the mouse as a vector
                spriteBatch.Begin();
                this.IsMouseVisible = true; 
                GraphicsDevice.Clear(Color.White); //Sets background to white
                string text; //String variable used to store the text value which will be drawn to the screen
                Vector2 size; 
                Vector2 position2 = new Vector2(40.0f, 20.0f);
                spriteBatch.Draw(banner, position2, Color.MonoGameOrange); //Draws the banner to the menu screen in the centre at the top at the position stored in vector position2
                spriteBatch.Draw(shipTex, new Vector2(100.0f, 60.0f), null, Color.Black, MathHelper.PiOver4, ship.Centre, 1, SpriteEffects.None, 1.0f); //Draws a ship next to the banner at an angle
                spriteBatch.Draw(shipthrust, new Vector2(470.0f, 60.0f), null, Color.Black, -MathHelper.PiOver4, ship.Centre, 1, SpriteEffects.None, 1.0f); //Draws a ship with the thrust next to the banner at an angle

                //Upon Startup of the application
                if (startup)
                {
                    text = "Play"; //Playbutton
                    size = NewSpriteFont.MeasureString(text); //Measures the size that the text stored in text would be if drawn in the font used in the game
                    Rectangle PlayButton = new Rectangle(50, 200, (int)(size.X * 1.5f), (int)(size.Y * 1.5f)); //Creates a new Rectangle around the play text which will be used for mouse detection
                    spriteBatch.Draw(GUI, PlayButton, Color.White); //Draws the rectangle to the screen in the colour white
                    spriteBatch.DrawString(NewSpriteFont, text, new Vector2(50, 200), Color.Red, 0, new Vector2(0, 0), 1.5f, SpriteEffects.None, 1.0f); //Draws the Play text to the menu in red
                    if (PlayButton.Contains(mousePos))
                    {
                        spriteBatch.Draw(GUI, PlayButton, Color.White); //Redraws the Playbutton in white
                        spriteBatch.DrawString(NewSpriteFont, text, new Vector2(50, 200), Color.CornflowerBlue, 0, new Vector2(0, 0), 1.5f, SpriteEffects.None, 1.0f); //Redraws the play text in blue when the mouse passes over the button rectangle (playbutton)
                        if (Mouse.GetState().LeftButton == ButtonState.Pressed)
                        {
                            level = 0;
                            score = 0;
                            lives = 3;
                            SetupGame();                                //ANNOTATE
                            CreateAsteroids();
                            GameOver = false;
                            startup = false;
                        }
                    }
                    text = "Quit"; // QuitButton
                    size = NewSpriteFont.MeasureString(text); //Measures the size that the text stored in string text would be if drawn in the font used in the game
                    Rectangle QuitButton = new Rectangle(50, 300, (int)(size.X * 1.5f), (int)(size.Y * 1.5f)); //Creates a new Rectangle around the quit text which will be used for mouse detection
                    spriteBatch.Draw(GUI, QuitButton, Color.White);
                    spriteBatch.DrawString(NewSpriteFont, text, new Vector2(50, 300), Color.Red, 0, new Vector2(0, 0), 1.5f, SpriteEffects.None, 1.0f);
                    if (QuitButton.Contains(mousePos))
                    {
                        spriteBatch.Draw(GUI, QuitButton, Color.White); //Redraws the Quitbutton in white
                        spriteBatch.DrawString(NewSpriteFont, text, new Vector2(50, 300), Color.CornflowerBlue, 0, new Vector2(0, 0), 1.5f, SpriteEffects.None, 1.0f); //Redraws the quit text in blue when the mouse passes over the button rectangle (quitbutton)
                        if (Mouse.GetState().LeftButton == ButtonState.Pressed)
                        {
                            Exit();
                        }
                    }

                    text = "Instructions & Controls"; //Instructions Button
                    size = NewSpriteFont.MeasureString(text); //Measures the size that the text stored in string text would be if drawn in the font used in the game
                    Rectangle ControlButton = new Rectangle(50, 250, (int)(size.X * 1.5f), (int)(size.Y * 1.5f)); //Creates a new Rectangle around the instructions & control text which will be used for mouse detection
                    spriteBatch.Draw(GUI, ControlButton, Color.White);
                    spriteBatch.DrawString(NewSpriteFont, text, new Vector2(50, 250), Color.Red, 0, new Vector2(0, 0), 1.5f, SpriteEffects.None, 1.0f);
                    if (ControlButton.Contains(mousePos))
                    {
                        spriteBatch.Draw(GUI, ControlButton, Color.White); //Redraws the Controlbutton in white
                        spriteBatch.DrawString(NewSpriteFont, text, new Vector2(50, 250), Color.CornflowerBlue, 0, new Vector2(0, 0), 1.5f, SpriteEffects.None, 1.0f);
                        if ((oldMouse.LeftButton == ButtonState.Released) && (newMouse.LeftButton == ButtonState.Pressed))
                        {
                            InstructionsScreen();
                        }        
                    }
                    if (Toggle) //If Instructions button is pressed
                    {
                        spriteBatch.Draw(instructions, new Vector2(50, 350), Color.White);
                        spriteBatch.Draw(controls, new Vector2(50, 150), Color.White);
                        
                        text = "X"; //Closing button for the instructions screen
                        size = NewSpriteFont.MeasureString(text);
                        Rectangle CrossButton = new Rectangle(520, 150, (int)(size.X * 1.1f), (int)(size.Y * 0.9f));
                        spriteBatch.Draw(GUI, CrossButton, Color.White);
                        spriteBatch.DrawString(NewSpriteFont, text, new Vector2(520, 150), Color.Red, 0, new Vector2(0, 0), 1f, SpriteEffects.None, 1.0f);
                        if (CrossButton.Contains(mousePos))
                        {
                            spriteBatch.DrawString(NewSpriteFont, text, new Vector2(520, 150), Color.Blue, 0, new Vector2(0, 0), 1f, SpriteEffects.None, 1.0f);
                            if ((oldMouse.LeftButton == ButtonState.Released) && (newMouse.LeftButton == ButtonState.Pressed))
                            {
                                Toggle = false;
                            }
                        }
                    }
                }
                    if (startup != true)
                {
                    text = "GAME OVER";
                    size = NewSpriteFont.MeasureString(text);
                    position2 = new Vector2((ScreenWidth / 2) - (size.X / 2),
                        (ScreenHeight / 2) - (size.Y * 2));
                    spriteBatch.DrawString(NewSpriteFont, text, position2, Color.Black);

                    text = "Congratulations!";
                    size = NewSpriteFont.MeasureString(text);
                    position2 = new Vector2((ScreenWidth / 2) - (size.X / 2),
                        (ScreenHeight / 2) - (size.Y * -1));
                    spriteBatch.DrawString(NewSpriteFont, text, position2, Color.Blue);

                    text = "You Got To Level: " + (level + 1);
                    size = NewSpriteFont.MeasureString(text);
                    position2 = new Vector2((ScreenWidth / 2) - (size.X / 2),
                        (ScreenHeight / 2) - (size.Y * -2));
                    spriteBatch.DrawString(NewSpriteFont, text, position2, Color.Blue);

                    text = "And Scored: " + score + "!";
                    size = NewSpriteFont.MeasureString(text);
                    position2 = new Vector2((ScreenWidth / 2) - (size.X / 2),
                        (ScreenHeight / 2) - (size.Y * -3));
                    spriteBatch.DrawString(NewSpriteFont, text, position2, Color.Blue);

                    text = "Play"; // PlayButton
                    size = NewSpriteFont.MeasureString(text);
                    Rectangle PlayButton = new Rectangle(50, 200, (int)(size.X * 1.5f), (int)(size.Y * 1.5f));
                    spriteBatch.Draw(GUI, PlayButton, Color.White);
                    spriteBatch.DrawString(NewSpriteFont, text, new Vector2(50, 200), Color.Red, 0, new Vector2(0, 0), 1.5f, SpriteEffects.None, 1.0f);
                    if (PlayButton.Contains(mousePos))
                    {
                        spriteBatch.Draw(GUI, PlayButton, Color.White);
                        spriteBatch.DrawString(NewSpriteFont, text, new Vector2(50, 200), Color.CornflowerBlue, 0, new Vector2(0, 0), 1.5f, SpriteEffects.None, 1.0f);
                        if (Mouse.GetState().LeftButton == ButtonState.Pressed)
                        {
                            level = 0;
                            score = 0;
                            lives = 3;
                            SetupGame();
                            CreateAsteroids();
                            GameOver = false;
                            startup = false;
                        }
                    }

                    text = "Menu"; // MenuButton
                    size = NewSpriteFont.MeasureString(text);
                    Rectangle MenuButton = new Rectangle(50, 250, (int)(size.X * 1.5f), (int)(size.Y * 1.5f));
                    spriteBatch.Draw(GUI, MenuButton, Color.White);
                    spriteBatch.DrawString(NewSpriteFont, text, new Vector2(50, 250), Color.Red, 0, new Vector2(0, 0), 1.5f, SpriteEffects.None, 1.0f);
                    if (MenuButton.Contains(mousePos))
                    {
                        spriteBatch.Draw(GUI, MenuButton, Color.White);
                        spriteBatch.DrawString(NewSpriteFont, text, new Vector2(50, 250), Color.CornflowerBlue, 0, new Vector2(0, 0), 1.5f, SpriteEffects.None, 1.0f);
                        if (Mouse.GetState().LeftButton == ButtonState.Pressed)
                        {
                            startup = true;
                            Toggle = false;
                        }
                    }

                    text = "Quit"; // QuitButton
                    size = NewSpriteFont.MeasureString(text);
                    Rectangle QuitButton = new Rectangle(50, 300, (int)(size.X * 1.5f), (int)(size.Y * 1.5f));
                    spriteBatch.Draw(GUI, QuitButton, Color.White);
                    spriteBatch.DrawString(NewSpriteFont, text, new Vector2(50, 300), Color.Red, 0, new Vector2(0, 0), 1.5f, SpriteEffects.None, 1.0f);
                    if (QuitButton.Contains(mousePos))
                    {
                        spriteBatch.Draw(GUI, QuitButton, Color.White);
                        spriteBatch.DrawString(NewSpriteFont, text, new Vector2(50, 300), Color.CornflowerBlue, 0, new Vector2(0, 0), 1.5f, SpriteEffects.None, 1.0f);
                        if (Mouse.GetState().LeftButton == ButtonState.Pressed)
                        {
                            Exit();
                        }
                    }
                }
                spriteBatch.End();

                return;
            }
            //  </MENU>

            //  <GUI>
            spriteBatch.Begin();

            CooldownBar(); //Draws the cooldown bar using the CooldownBar() subroutine

            Vector2 position = new Vector2(10, 10);
            spriteBatch.DrawString(NewSpriteFont,
                "Score = " + score.ToString(),
                position,
                Color.DeepSkyBlue);

            position = new Vector2(140, 10);
            spriteBatch.DrawString(NewSpriteFont,
                "High = " + HiScore.ToString(),
                position,
                Color.Orange);

            position = new Vector2(500, 30);
            spriteBatch.DrawString(NewSpriteFont,
                "Level = " + (level + 1),
                position,
                Color.Magenta);

            Rectangle shipRect;

            for (int i = 0; i < lives; i++)
            {
                shipRect = new Rectangle(i * ship.Width + 10,
                       40,
                       ship.Width,
                       ship.Height);

                spriteBatch.Draw(shipTex, shipRect, Color.White);
            }

            //  </GUI>

            //  <Entities>
            spriteBatch.Draw(ship.Texture,
                    ship.Position,
                    null,
                    Color.White,
                    ship.Rotation,
                    ship.Centre,
                    ship.Scale,
                    SpriteEffects.None,
                    1.0f);

            foreach (Sprite b in bullets)
            {
                
                if (b.Alive)
                {
                    
                    spriteBatch.Draw(b.Texture,
                        b.Position,
                        null,
                        Color.White,
                        b.Rotation,
                        b.Centre,
                        b.Scale,
                        SpriteEffects.None,
                        1.0f);
                }
            }

            foreach (Sprite a in asteroids)
            {
                if (a.Alive)
                {
                    spriteBatch.Draw(a.Texture,
                        a.Position,
                        null,
                        Color.White,
                        a.Rotation,
                        a.Centre,
                        a.Scale,
                        SpriteEffects.None,
                        1.0f);
                }
            }

            spriteBatch.End();

            //  </Entities>

            base.Draw(gameTime);
        }
    }
}
